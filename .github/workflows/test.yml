name: Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test-autoscore-server:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.12" ]
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        working-directory: autoscore-server
        run: uv sync --dev

      - name: Run mypy type check
        working-directory: autoscore-server
        run: uv run mypy .

      - name: Run tests
        working-directory: autoscore-server
        run: uv run pytest

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Build with Maven
        working-directory: backend
        run: mvn -B package --file pom.xml

  test-expo-app:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'app/package-lock.json'
      
      - name: Install dependencies
        working-directory: app
        run: npm ci
      
      - name: Run TypeScript check
        working-directory: app
        run: npx tsc --noEmit
      
      - name: Run linting
        working-directory: app
        run: npm run lint
      
      - name: Test Expo export (compilation check)
        working-directory: app
        run: npx expo export --platform web --output-dir dist --dump-assetmap

  # release-autoscore-server:
  #   needs: test-autoscore-server
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/autoscore-server-v')
  #   steps:
  #     - uses: actions/checkout@v4
  #
  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v4
  #       with:
  #         version: "latest"
  #
  #     - name: Set up Python
  #       run: uv python install 3.12
  #
  #     - name: Install dependencies
  #       working-directory: autoscore-server
  #       run: uv sync --dev
  #
  #     - name: Build package
  #       working-directory: autoscore-server
  #       run: uv build
  #
  #     - name: Extract release notes
  #       id: extract-release-notes
  #       uses: ffurrer2/extract-release-notes@v2
  #
  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         files: autoscore-server/dist/*
  #         body: ${{ steps.extract-release-notes.outputs.release_notes }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #
  #     # Uncomment to publish to PyPI
  #     # - name: Publish to PyPI
  #     #   env:
  #     #     UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #     #   working-directory: autoscore-server
  #     #   run: uv publish

  # release-backend:
  #   needs: test-backend
  #   runs-on: ubuntu-latest
  #   if: startsWith(github.ref, 'refs/tags/backend-v')
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - name: Set up JDK 21
  #       uses: actions/setup-java@v4
  #       with:
  #         java-version: '21'
  #         distribution: 'temurin'
  #         cache: maven
  #     
  #     - name: Build with Maven
  #       working-directory: backend
  #       run: mvn -B package --file pom.xml
  #     
  #     - name: Extract release notes
  #       id: extract-release-notes
  #       uses: ffurrer2/extract-release-notes@v2
  #     
  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         files: backend/target/*.jar
  #         body: ${{ steps.extract-release-notes.outputs.release_notes }}
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
